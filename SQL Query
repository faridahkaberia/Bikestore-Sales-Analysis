CREATE DATABASE bikestore;
USE bikestore;
-- Imported each table from excel to sql using the Table Data Import Wizard
-- Reading data in every table to understand its contents (fields and records)
SELECT *
FROM categories;
SELECT *
FROM brands;
SELECT *
FROM customers;
SELECT *
FROM products;
SELECT *
FROM orders;
SELECT *
FROM staffs;
SELECT *
FROM stocks;
SELECT *
FROM stores;
SELECT *
FROM order_items;

-- GENERATING INSIGHTS USING THE DATA

-- Total Revenue Generated 
SELECT 
    ROUND(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 2) AS total_revenue
FROM order_items oi;

-- YEARLY STORE PERFORMANCE
-- Total revenue generated per year
SELECT DATE_FORMAT(o.order_date, '%Y') AS year, ROUND(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 2) AS total_revenue
FROM order_items oi
JOIN orders o ON oi.order_id = o.order_id
GROUP BY year
ORDER BY total_revenue DESC;

-- MONTHLY STORE PERFORMANCE
-- Seasonal sales trend (Peak months)
SELECT 
    DATE_FORMAT(o.order_date, '%m') AS month,
    ROUND(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 2) AS total_sales
FROM orders o
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY month
ORDER BY total_sales DESC;

-- Total revenue generated by each store - Boldwin Bikes generates the highest revenue, followed by Santa Cruz Bikes and lastly Rowlett Bikes
SELECT s.store_name, ROUND(SUM(oi.quantity*oi.list_price * (1 - oi.discount)), 2) AS Total_Revenue_Generated
FROM stores s
JOIN orders o ON o.store_id = s.store_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY s.store_name
ORDER BY Total_Revenue_Generated DESC;

--SALES BY PRODUCT
-- Top 5 best selling products based on total quantity sold
SELECT p.product_name, SUM(oi.quantity) AS total_sold
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
GROUP BY p.product_name
ORDER BY total_sold DESC
LIMIT 5;

-- SALES BY BRAND
-- Best Selling Brand - Electra(2612), Trek(1839), Surly(908)
-- Worst Selling Brand - Strider(25), Ritchey(118), Heller(138) 
SELECT b.brand_name, SUM(oi.quantity) As Total_Sold
FROM brands b
JOIN products p ON b.brand_id = p.brand_id
JOIN order_items oi ON oi.product_id = p.product_id
GROUP BY b.brand_name
ORDER BY Total_Sold DESC;

-- SALES BY CATEGORY
-- Best Selling category- Cruiser Bicycles(2063), Mountain Bikes(1755), Children Bicycles(1179)
-- Worst Selling Category - Electric Bikes(315), Cydocross Bicycles(394), Road Bikes(559) 
SELECT c.category_name, SUM(oi.quantity) AS total_orders
FROM categories c
JOIN products p ON c.category_id = p.category_id
JOIN order_items oi ON oi.product_id = p.product_id
GROUP BY category_name
ORDER BY total_orders DESC;

-- REVENUE BY CATEGORY
-- Categories bringing in the most revenue - Mountain Bikes, Road Bikes, Crusisers Bikes
-- Categories Bringing in the least Revenue - Children Bicycles, Comfort Bikes, Cyclocross Bicycles
SELECT c.category_name, ROUND(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 2) AS total_revenue
FROM order_items oi
JOIN products p ON oi.product_id = p.product_id
JOIN categories c ON p.category_id = c.category_id
GROUP BY c.category_name
ORDER BY total_revenue DESC;

-- CHECKING INVENTORY LEVELS
-- Inventory running low on stock
SELECT s.store_id, st.store_name, s.product_id, p.product_name, s.quantity
FROM stocks s
JOIN stores st ON s.store_id = st.store_id
JOIN products p ON s.product_id = p.product_id
WHERE s.quantity < 5
ORDER BY s.quantity ASC;

-- Checking if discounts are resulting in increased revenue 
SELECT oi.discount, COUNT(oi.order_id) AS orders_count,
    SUM(oi.quantity * oi.list_price * (1 - oi.discount)) AS total_revenue
FROM order_items oi
GROUP BY oi.discount
ORDER BY total_revenue DESC;

-- EMPLOYEE PERFORMANCE
-- Employees that brought in the most revenue - Mercelene Boyer, Venila Daniel
-- Employees that brought in the least revenue - Lyla Tarell, Kali Vargas 
SELECT s.first_name, s.last_name, COUNT(o.order_id) AS Total_Sales, ROUND(SUM(oi.quantity*oi.list_price * (1 - oi.discount)), 2) AS Revenue_Generated
FROM staffs s
JOIN orders o ON s.staff_id = o.staff_id
JOIN order_items oi ON oi.order_id = o.order_id
GROUP BY s.first_name, s.last_name
ORDER BY Revenue_Generated DESC;

-- Returning Vs New Customers - 1314 New Customers compared to 131 Returning Customers
SELECT 
    CASE 
        WHEN order_count = 1 THEN 'New Customer'
        ELSE 'Returning Customer'
    END AS customer_type,
    COUNT(*) AS customer_count
FROM (
    SELECT customer_id, COUNT(order_id) AS order_count
    FROM orders
    GROUP BY customer_id
) AS subquery
GROUP BY customer_type;

-- Most valuable customers who have spent most money at the store - Sharyn Hopkins, Pamela Newman, Abby Gamble, 
SELECT c.first_name, c.last_name, ROUND(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 2) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 10;


-- State and city with the highest spending customers, generating the most revenue - Mount Vermon NY, Balliston Spa NY, San Angelo TX
SELECT c.state, c.city, COUNT(DISTINCT c.customer_id) AS total_customers,
    ROUND(SUM(oi.quantity * oi.list_price * (1 - oi.discount)), 2) AS total_revenue
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY c.state, c.city
ORDER BY total_revenue DESC
LIMIT 10;
